import pandas as pd
import streamlit as st
from io import BytesIO

# --- –®–∞–±–ª–æ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö ---
TEMPLATES = {
    "ports": {
        "columns": ["–†–µ–≥–∏–æ–Ω", "–ü–æ—Ä—Ç", "LOCODE", "–ü—Ä–∏—á–∞–ª", "–ü–µ—Ä–µ–≤–∞–ª–∏–≤–∞–µ–º—ã–µ –≥—Ä—É–∑—ã", "–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º—É–º"]
    },
    "cargo_dict": {
        "columns": ["–¢–∏–ø –≥—Ä—É–∑–∞", "–ì—Ä—É–ø–ø–∞ –≥—Ä—É–∑–∞", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞", "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"]
    },
    "ships": {
        "columns": ["–°—É–¥–Ω–æ", "–ò–ú–û ‚Ññ", "–§–ª–∞–≥", "–°—É–¥–æ–≤–ª–∞–¥–µ–ª–µ—Ü", "LOA", "BEAM", "DM", "DRAFT", "DWT"]
    },
    "voyages": {
        "columns": ["VOY_ID", "–°—É–¥–Ω–æ", "–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", "–ü–æ—Ä—Ç—ã –ø–æ–≥—Ä—É–∑–∫–∏", "–ü–æ—Ä—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", "–ì—Ä—É–∑", "–¢–æ–Ω–Ω–∞–∂", "–î–∞—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏", "–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏"]
    },
    "voy_route_legs": {
        "columns": ["VOY_ID", "ROUTE.ID", "ROUTE.LEG", "ROUTE.LEG.TYPE", "OPS.RELATE", 
                    "ROUTE POINT DESCRIPTION", "OPS GROUP", "STATUS", "META_REF_OPS",
                    "DT.TIME-BEG", "DT.TIME FIN", "DUR", "COSTS"]
    }
}

# --- –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel —à–∞–±–ª–æ–Ω–∞ ---
def generate_template(template_name: str):
    if template_name not in TEMPLATES:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω: {template_name}")
    df = pd.DataFrame(columns=TEMPLATES[template_name]["columns"])
    buffer = BytesIO()
    df.to_excel(buffer, index=False, engine='openpyxl')
    buffer.seek(0)
    return buffer

# --- Streamlit UI –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ ---
def download_template_ui():
    st.header("üì• –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω—ã Excel –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
    for name in TEMPLATES:
        buffer = generate_template(name)
        st.download_button(
            label=f"–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω {name}.xlsx",
            data=buffer,
            file_name=f"{name}_template.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

# --- Streamlit UI –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
def upload_data_ui():
    st.header("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    uploaded_files = {}
    for name in TEMPLATES:
        file = st.file_uploader(f"–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª {name}.xlsx", type=["xlsx", "csv"], key=f"upload_{name}")
        if file:
            if file.name.endswith(".csv"):
                df = pd.read_csv(file)
            else:
                df = pd.read_excel(file)
            uploaded_files[name] = df
            st.success(f"–§–∞–π–ª {file.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è {name}")
    return uploaded_files


# --- –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ---
if __name__ == "__main__":
    st.title("–ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö")
    download_template_ui()
    uploaded = upload_data_ui()
    if uploaded:
        for name, df in uploaded.items():
            st.subheader(f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: {name}")
            st.dataframe(df)